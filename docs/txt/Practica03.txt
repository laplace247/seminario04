

    import numpy as np
    #crear vector
    v1 = np.array([10,20,30,40,50])
    #print(v1)
    #crear matriz
    m1 = np.array([[15,20,25],[30,35,40]])
    #print(m1)
    #operacion basica
    #al vector sumarle 3
    sum_vec = v1 + 3
    #print(sum_vec)
    #producto de matriz x vector
    prod_mat_vec = np.dot(m1,v1[2:5]) #no agarra los 2 primeros (multiplicacion)
    print(prod_mat_vec)

    [2500 4300]

EJERCICIO 01 crear un vector con 10 elementos con valores que inician en
15 y rellena de forma consecutiva hasta tener 10 elementos crear un
matriz de 3x3 es decir 9 elementos desde 1 hasta el 9 realiza la
multiplicacion de los ultimos elementos y otra multiplicacion de la
posicion 4 del vector al 6 por toda la matriz

    import numpy as np
    v1 = np.array([16,17,18,19,20,30,40,50,60,70])
    m1 = np.array([[1,2,3],[4,5,6],[7,8,9]])
    prod_mat_vec = np.dot(m1,v1[7:10]) #siempre es un digito antes del la posicion indicada
    print(prod_mat_vec)
    prod_mat_vec2 = np.dot(m1,v1[3:6])
    print(prod_mat_vec2)

    [ 380  920 1460]
    [149 356 563]

    #librerias de pandas y numpy
    #pandas: lib para manipular y analizar datos (forma flexible)
    #numpy: lib desarrollada para calculos cientificos algebraicos
    import pandas as pd
    import numpy as np
    #crear dataframe
    data={'C1':[30,20,10],'C2':[15.6,34.8,69.2]}
    df1=pd.DataFrame(data)
    #print(df1)
    #op algebraica con logaritmos
    df1['Col3']=np.log(df1['C1'])
    print(df1)

       C1    C2      Col3
    0  30  15.6  3.401197
    1  20  34.8  2.995732
    2  10  69.2  2.302585

EJERCICIO 02 crea una dataframe con 5 filas y 3 columnas con elementos
random, añadir una columna que calcule la suma de las 2 primeras
columnas

    import pandas as pd
    import numpy as np
    #crear dataframe
    df=pd.DataFrame(np.random.randint(1,10,size=(5,3)),columns=['A','E','O'])
    df['suma']=df['A']+df['E']
    print(df)

       A  E  O  suma
    0  7  3  1    10
    1  6  2  4     8
    2  6  3  9     9
    3  5  7  8    12
    4  8  5  4    13

    #manipular y analizar datos
    import pandas as pd
    data={'Nombre':['Luis','Jose','Anastacio'],'Edad':[60,45,20]}
    df1=pd.DataFrame(data)
    #filtrar a personas mayores de 30 años
    df_f=df1[df1['Edad']>30]
    print(df_f)

      Nombre  Edad
    0   Luis    60
    1   Jose    45

EJERCICIO 03 crea una dataframe con info de los estudiantes de senati
donde tendras el nombre, edad, carrera y nota final deberas crear min 8
registros y max 20 registros. Filtrar la mayor nota, ojo: si existe
varias notas altas se deben mostrar todas

    import pandas as pd
    data={'Nombre':['Angel','Guti','Adrian','Gonzalo','Omar','Hugo','Patricio','Fernando'],
          'Edad':[19,18,20,19,20,21,18,19],
          'Carrera':['Software','Diseño','Mecanica','Textileria','Ciberseguridad','Electronica','Soporte','Administracion'],
          'Nota':[14.5,16,15,20,18.5,19,11,15]}
    df1=pd.DataFrame(data)
    df_f=df1[df1['Nota']==df1['Nota'].max()]
    print(df_f)

        Nombre  Edad     Carrera  Nota
    3  Gonzalo    19  Textileria  20.0

    #crear archivos CSV y leelos para su analisis
    import pandas as pd
    import numpy as np

    data={'Nombre':['Angel','Guti','Adrian','Gonzalo','Omar','Hugo','Patricio','Fernando'],
          'Edad':[19,18,20,19,20,21,18,19],
          'Carrera':['Software','Diseño','Mecanica','Textileria','Ciberseguridad','Electronica','Soporte','Administracion']}
    df1=pd.DataFrame(data)
    #guardar como archivo .csv
    df1.to_csv('estudiante_senati.csv',index=False)
    #Leer archivos CSV con PANDAS
    df_leido=pd.read_csv('estudiante_senati.csv')
    print(df_leido)
    #Leer archivos CSV con NUMPY
    df_leido2=np.genfromtxt('estudiante_senati.csv',delimiter=',',dtype=None,encoding='utf-8',names=True)
    print(df_leido2)

         Nombre  Edad         Carrera
    0     Angel    19        Software
    1      Guti    18          Diseño
    2    Adrian    20        Mecanica
    3   Gonzalo    19      Textileria
    4      Omar    20  Ciberseguridad
    5      Hugo    21     Electronica
    6  Patricio    18         Soporte
    7  Fernando    19  Administracion
    [('Angel', 19, 'Software') ('Guti', 18, 'Diseño')
     ('Adrian', 20, 'Mecanica') ('Gonzalo', 19, 'Textileria')
     ('Omar', 20, 'Ciberseguridad') ('Hugo', 21, 'Electronica')
     ('Patricio', 18, 'Soporte') ('Fernando', 19, 'Administracion')]

EJERCICIO 04 crear un archivo csv con los siguientes datos: producto,
cantidad, precio_unitario, precio_docena, valor_venta, :luego mostrarlo
con pandas y numpy

    #crear archivos CSV y leelos para su analisis
    import pandas as pd
    import numpy as np

    data={'Producto':['Gaseosa','Papel Higienico','Galletas','Chicles','Sal','Atun','Arroz','Azucar'],
          'Cantidad':[60,48,20,29,35,41,52,33],
          'Precio_unitario':[4,1.5,1,2,5,3.5,3,5.5],
          'Precio_docena':[56,25,10,28,20,21,18,19],
          'Valor_venta':[270,130,70,350,300,450,200,220]}
    df1=pd.DataFrame(data)
    df1.to_csv('productos.csv',index=False)
    #Leer archivos CSV con PANDAS
    df_leido=pd.read_csv('productos.csv')
    print(df_leido)
    #Leer archivos CSV con NUMPY
    df_leido2=np.genfromtxt('productos.csv',delimiter=',',dtype=None,encoding='utf-8',names=True)
    print(df_leido2)

              Producto  Cantidad  Precio_unitario  Precio_docena  Valor_venta
    0          Gaseosa        60              4.0             56          270
    1  Papel Higienico        48              1.5             25          130
    2         Galletas        20              1.0             10           70
    3          Chicles        29              2.0             28          350
    4              Sal        35              5.0             20          300
    5             Atun        41              3.5             21          450
    6            Arroz        52              3.0             18          200
    7           Azucar        33              5.5             19          220
    [('Gaseosa', 60, 4. , 56, 270) ('Papel Higienico', 48, 1.5, 25, 130)
     ('Galletas', 20, 1. , 10,  70) ('Chicles', 29, 2. , 28, 350)
     ('Sal', 35, 5. , 20, 300) ('Atun', 41, 3.5, 21, 450)
     ('Arroz', 52, 3. , 18, 200) ('Azucar', 33, 5.5, 19, 220)]

    #MACHINE LEARNING
    from sklearn.datasets import load_iris
    #dividir datos para el entrenamiento y pruebas
    from sklearn.model_selection import train_test_split
    #regresion logica para la clasificacion de las flores
    from sklearn.linear_model import LogisticRegression
    #calcular la precision del modelo a traves de la prediccion y los valores reales
    from sklearn.metrics import accuracy_score

    #cargar datos
    data=load_iris() #carga de datos de load_iris
    X = data.data #caracteristicas
    y = data.target #etiquetas

    #division de los conjuntos de datos
    X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

    #crear y entrenar el modelo
    model = LogisticRegression(max_iter=200)
    model.fit(X_train,y_train)

    #realizar predicciones
    y_pred = model.predict(X_test)

    #evaluar el modelo
    accuracy = accuracy_score(y_test,y_pred)

    #visualizar lso resultados
    print("Accuracy:",accuracy)

    {'data': array([[5.1, 3.5, 1.4, 0.2],
           [4.9, 3. , 1.4, 0.2],
           [4.7, 3.2, 1.3, 0.2],
           [4.6, 3.1, 1.5, 0.2],
           [5. , 3.6, 1.4, 0.2],
           [5.4, 3.9, 1.7, 0.4],
           [4.6, 3.4, 1.4, 0.3],
           [5. , 3.4, 1.5, 0.2],
           [4.4, 2.9, 1.4, 0.2],
           [4.9, 3.1, 1.5, 0.1],
           [5.4, 3.7, 1.5, 0.2],
           [4.8, 3.4, 1.6, 0.2],
           [4.8, 3. , 1.4, 0.1],
           [4.3, 3. , 1.1, 0.1],
           [5.8, 4. , 1.2, 0.2],
           [5.7, 4.4, 1.5, 0.4],
           [5.4, 3.9, 1.3, 0.4],
           [5.1, 3.5, 1.4, 0.3],
           [5.7, 3.8, 1.7, 0.3],
           [5.1, 3.8, 1.5, 0.3],
           [5.4, 3.4, 1.7, 0.2],
           [5.1, 3.7, 1.5, 0.4],
           [4.6, 3.6, 1. , 0.2],
           [5.1, 3.3, 1.7, 0.5],
           [4.8, 3.4, 1.9, 0.2],
           [5. , 3. , 1.6, 0.2],
           [5. , 3.4, 1.6, 0.4],
           [5.2, 3.5, 1.5, 0.2],
           [5.2, 3.4, 1.4, 0.2],
           [4.7, 3.2, 1.6, 0.2],
           [4.8, 3.1, 1.6, 0.2],
           [5.4, 3.4, 1.5, 0.4],
           [5.2, 4.1, 1.5, 0.1],
           [5.5, 4.2, 1.4, 0.2],
           [4.9, 3.1, 1.5, 0.2],
           [5. , 3.2, 1.2, 0.2],
           [5.5, 3.5, 1.3, 0.2],
           [4.9, 3.6, 1.4, 0.1],
           [4.4, 3. , 1.3, 0.2],
           [5.1, 3.4, 1.5, 0.2],
           [5. , 3.5, 1.3, 0.3],
           [4.5, 2.3, 1.3, 0.3],
           [4.4, 3.2, 1.3, 0.2],
           [5. , 3.5, 1.6, 0.6],
           [5.1, 3.8, 1.9, 0.4],
           [4.8, 3. , 1.4, 0.3],
           [5.1, 3.8, 1.6, 0.2],
           [4.6, 3.2, 1.4, 0.2],
           [5.3, 3.7, 1.5, 0.2],
           [5. , 3.3, 1.4, 0.2],
           [7. , 3.2, 4.7, 1.4],
           [6.4, 3.2, 4.5, 1.5],
           [6.9, 3.1, 4.9, 1.5],
           [5.5, 2.3, 4. , 1.3],
           [6.5, 2.8, 4.6, 1.5],
           [5.7, 2.8, 4.5, 1.3],
           [6.3, 3.3, 4.7, 1.6],
           [4.9, 2.4, 3.3, 1. ],
           [6.6, 2.9, 4.6, 1.3],
           [5.2, 2.7, 3.9, 1.4],
           [5. , 2. , 3.5, 1. ],
           [5.9, 3. , 4.2, 1.5],
           [6. , 2.2, 4. , 1. ],
           [6.1, 2.9, 4.7, 1.4],
           [5.6, 2.9, 3.6, 1.3],
           [6.7, 3.1, 4.4, 1.4],
           [5.6, 3. , 4.5, 1.5],
           [5.8, 2.7, 4.1, 1. ],
           [6.2, 2.2, 4.5, 1.5],
           [5.6, 2.5, 3.9, 1.1],
           [5.9, 3.2, 4.8, 1.8],
           [6.1, 2.8, 4. , 1.3],
           [6.3, 2.5, 4.9, 1.5],
           [6.1, 2.8, 4.7, 1.2],
           [6.4, 2.9, 4.3, 1.3],
           [6.6, 3. , 4.4, 1.4],
           [6.8, 2.8, 4.8, 1.4],
           [6.7, 3. , 5. , 1.7],
           [6. , 2.9, 4.5, 1.5],
           [5.7, 2.6, 3.5, 1. ],
           [5.5, 2.4, 3.8, 1.1],
           [5.5, 2.4, 3.7, 1. ],
           [5.8, 2.7, 3.9, 1.2],
           [6. , 2.7, 5.1, 1.6],
           [5.4, 3. , 4.5, 1.5],
           [6. , 3.4, 4.5, 1.6],
           [6.7, 3.1, 4.7, 1.5],
           [6.3, 2.3, 4.4, 1.3],
           [5.6, 3. , 4.1, 1.3],
           [5.5, 2.5, 4. , 1.3],
           [5.5, 2.6, 4.4, 1.2],
           [6.1, 3. , 4.6, 1.4],
           [5.8, 2.6, 4. , 1.2],
           [5. , 2.3, 3.3, 1. ],
           [5.6, 2.7, 4.2, 1.3],
           [5.7, 3. , 4.2, 1.2],
           [5.7, 2.9, 4.2, 1.3],
           [6.2, 2.9, 4.3, 1.3],
           [5.1, 2.5, 3. , 1.1],
           [5.7, 2.8, 4.1, 1.3],
           [6.3, 3.3, 6. , 2.5],
           [5.8, 2.7, 5.1, 1.9],
           [7.1, 3. , 5.9, 2.1],
           [6.3, 2.9, 5.6, 1.8],
           [6.5, 3. , 5.8, 2.2],
           [7.6, 3. , 6.6, 2.1],
           [4.9, 2.5, 4.5, 1.7],
           [7.3, 2.9, 6.3, 1.8],
           [6.7, 2.5, 5.8, 1.8],
           [7.2, 3.6, 6.1, 2.5],
           [6.5, 3.2, 5.1, 2. ],
           [6.4, 2.7, 5.3, 1.9],
           [6.8, 3. , 5.5, 2.1],
           [5.7, 2.5, 5. , 2. ],
           [5.8, 2.8, 5.1, 2.4],
           [6.4, 3.2, 5.3, 2.3],
           [6.5, 3. , 5.5, 1.8],
           [7.7, 3.8, 6.7, 2.2],
           [7.7, 2.6, 6.9, 2.3],
           [6. , 2.2, 5. , 1.5],
           [6.9, 3.2, 5.7, 2.3],
           [5.6, 2.8, 4.9, 2. ],
           [7.7, 2.8, 6.7, 2. ],
           [6.3, 2.7, 4.9, 1.8],
           [6.7, 3.3, 5.7, 2.1],
           [7.2, 3.2, 6. , 1.8],
           [6.2, 2.8, 4.8, 1.8],
           [6.1, 3. , 4.9, 1.8],
           [6.4, 2.8, 5.6, 2.1],
           [7.2, 3. , 5.8, 1.6],
           [7.4, 2.8, 6.1, 1.9],
           [7.9, 3.8, 6.4, 2. ],
           [6.4, 2.8, 5.6, 2.2],
           [6.3, 2.8, 5.1, 1.5],
           [6.1, 2.6, 5.6, 1.4],
           [7.7, 3. , 6.1, 2.3],
           [6.3, 3.4, 5.6, 2.4],
           [6.4, 3.1, 5.5, 1.8],
           [6. , 3. , 4.8, 1.8],
           [6.9, 3.1, 5.4, 2.1],
           [6.7, 3.1, 5.6, 2.4],
           [6.9, 3.1, 5.1, 2.3],
           [5.8, 2.7, 5.1, 1.9],
           [6.8, 3.2, 5.9, 2.3],
           [6.7, 3.3, 5.7, 2.5],
           [6.7, 3. , 5.2, 2.3],
           [6.3, 2.5, 5. , 1.9],
           [6.5, 3. , 5.2, 2. ],
           [6.2, 3.4, 5.4, 2.3],
           [5.9, 3. , 5.1, 1.8]]), 'target': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
           0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), 'frame': None, 'target_names': array(['setosa', 'versicolor', 'virginica'], dtype='<U10'), 'DESCR': '.. _iris_dataset:\n\nIris plants dataset\n--------------------\n\n**Data Set Characteristics:**\n\n    :Number of Instances: 150 (50 in each of three classes)\n    :Number of Attributes: 4 numeric, predictive attributes and the class\n    :Attribute Information:\n        - sepal length in cm\n        - sepal width in cm\n        - petal length in cm\n        - petal width in cm\n        - class:\n                - Iris-Setosa\n                - Iris-Versicolour\n                - Iris-Virginica\n                \n    :Summary Statistics:\n\n    ============== ==== ==== ======= ===== ====================\n                    Min  Max   Mean    SD   Class Correlation\n    ============== ==== ==== ======= ===== ====================\n    sepal length:   4.3  7.9   5.84   0.83    0.7826\n    sepal width:    2.0  4.4   3.05   0.43   -0.4194\n    petal length:   1.0  6.9   3.76   1.76    0.9490  (high!)\n    petal width:    0.1  2.5   1.20   0.76    0.9565  (high!)\n    ============== ==== ==== ======= ===== ====================\n\n    :Missing Attribute Values: None\n    :Class Distribution: 33.3% for each of 3 classes.\n    :Creator: R.A. Fisher\n    :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov)\n    :Date: July, 1988\n\nThe famous Iris database, first used by Sir R.A. Fisher. The dataset is taken\nfrom Fisher\'s paper. Note that it\'s the same as in R, but not as in the UCI\nMachine Learning Repository, which has two wrong data points.\n\nThis is perhaps the best known database to be found in the\npattern recognition literature.  Fisher\'s paper is a classic in the field and\nis referenced frequently to this day.  (See Duda & Hart, for example.)  The\ndata set contains 3 classes of 50 instances each, where each class refers to a\ntype of iris plant.  One class is linearly separable from the other 2; the\nlatter are NOT linearly separable from each other.\n\n|details-start|\n**References**\n|details-split|\n\n- Fisher, R.A. "The use of multiple measurements in taxonomic problems"\n  Annual Eugenics, 7, Part II, 179-188 (1936); also in "Contributions to\n  Mathematical Statistics" (John Wiley, NY, 1950).\n- Duda, R.O., & Hart, P.E. (1973) Pattern Classification and Scene Analysis.\n  (Q327.D83) John Wiley & Sons.  ISBN 0-471-22361-1.  See page 218.\n- Dasarathy, B.V. (1980) "Nosing Around the Neighborhood: A New System\n  Structure and Classification Rule for Recognition in Partially Exposed\n  Environments".  IEEE Transactions on Pattern Analysis and Machine\n  Intelligence, Vol. PAMI-2, No. 1, 67-71.\n- Gates, G.W. (1972) "The Reduced Nearest Neighbor Rule".  IEEE Transactions\n  on Information Theory, May 1972, 431-433.\n- See also: 1988 MLC Proceedings, 54-64.  Cheeseman et al"s AUTOCLASS II\n  conceptual clustering system finds 3 classes in the data.\n- Many, many more ...\n\n|details-end|', 'feature_names': ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)'], 'filename': 'iris.csv', 'data_module': 'sklearn.datasets.data'}
